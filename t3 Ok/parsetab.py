
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftLTLEGTGEleftPLUSMINUSleftTIMESDIVMODrightNOTrightUMINUSAND BOOLEAN CHAR COMMA DIV DOUBLE ELSE EQ EQUALS FLOAT FOR GE GT ID IF INT LBRACE LE LPAREN LT MINUS MOD NE NOT NUM_DEC NUM_INT OR PLUS PRINTLN RBRACE RETURN RPAREN SEMICOLON STRING TIMES WHILEprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : var_declaration\n                 | assignment\n                 | function_declaration\n                 | if_statement\n                 | while_statement\n                 | for_statement\n                 | return_statement\n                 | expression_statement\n                 | print_statement\n                 | compound_statementvar_declaration : type_specifier ID SEMICOLON\n                       | type_specifier ID EQUALS expression SEMICOLONtype_specifier : INT\n                      | FLOAT\n                      | DOUBLE\n                      | CHAR\n                      | BOOLEANassignment : ID EQUALS expression SEMICOLONfunction_declaration : type_specifier ID LPAREN parameter_list RPAREN compound_statementparameter_list : parameter_list COMMA parameter\n                      | parameter\n                      | emptyparameter : type_specifier IDif_statement : IF LPAREN expression RPAREN compound_statement\n                    | IF LPAREN expression RPAREN compound_statement ELSE compound_statementwhile_statement : WHILE LPAREN expression RPAREN compound_statementfor_statement : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statementreturn_statement : RETURN expression SEMICOLONexpression_statement : expression SEMICOLONprint_statement : PRINTLN LPAREN STRING RPAREN SEMICOLONexpression : logical_or_expressionlogical_or_expression : logical_or_expression OR logical_and_expression\n                             | logical_and_expressionlogical_and_expression : logical_and_expression AND equality_expression\n                              | equality_expressionequality_expression : equality_expression EQ relational_expression\n                           | equality_expression NE relational_expression\n                           | relational_expressionrelational_expression : relational_expression LT additive_expression\n                             | relational_expression GT additive_expression\n                             | relational_expression LE additive_expression\n                             | relational_expression GE additive_expression\n                             | additive_expressionadditive_expression : additive_expression PLUS multiplicative_expression\n                           | additive_expression MINUS multiplicative_expression\n                           | multiplicative_expressionmultiplicative_expression : multiplicative_expression TIMES unary_expression\n                                 | multiplicative_expression DIV unary_expression\n                                 | multiplicative_expression MOD unary_expression\n                                 | unary_expressionunary_expression : MINUS unary_expression %prec UMINUS\n                        | NOT unary_expression\n                        | postfix_expressionpostfix_expression : primary_expression\n                          | ID LPAREN argument_list RPARENargument_list : argument_list COMMA expression\n                     | expression\n                     | emptyprimary_expression : ID\n                          | NUM_INT\n                          | NUM_DEC\n                          | STRING\n                          | LPAREN expression RPARENempty :compound_statement : LBRACE statement_list RBRACE'
    
_lr_action_items = {'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,17,21,24,25,26,27,28,29,36,38,43,45,46,47,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,84,99,103,105,108,110,115,116,118,119,122,123,126,],[15,15,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,44,49,49,15,-16,-17,-18,-19,-20,49,49,-2,49,49,-32,49,49,49,15,49,49,49,49,49,49,49,49,49,49,49,49,49,-14,49,-31,-68,111,-21,49,49,-15,-27,-29,-33,-22,49,-28,-30,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,82,84,103,110,115,116,118,119,123,126,],[18,18,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,18,-2,-32,18,-14,-31,-68,-21,-15,-27,-29,-33,-22,-28,-30,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,82,84,103,110,115,116,118,119,123,126,],[19,19,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,19,-2,-32,19,-14,-31,-68,-21,-15,-27,-29,-33,-22,-28,-30,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,82,84,103,110,115,116,118,119,123,126,],[20,20,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,20,-2,-32,20,-14,-31,-68,-21,-15,-27,-29,-33,-22,-28,-30,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,82,84,103,110,115,116,118,119,123,126,],[21,21,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,21,-2,-32,21,-14,-31,-68,-21,-15,-27,-29,-33,-22,-28,-30,]),'PRINTLN':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,82,84,103,110,115,116,118,119,123,126,],[22,22,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,22,-2,-32,22,-14,-31,-68,-21,-15,-27,-29,-33,-22,-28,-30,]),'LBRACE':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,82,84,103,106,107,110,112,115,116,118,119,121,123,125,126,],[24,24,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,24,-2,-32,24,-14,-31,-68,-21,24,24,-15,24,-27,-29,-33,-22,24,-28,24,-30,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,73,82,84,103,110,113,115,116,118,119,123,126,],[25,25,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,25,-2,-32,25,-14,25,-31,-68,-21,-15,25,-27,-29,-33,-22,-28,-30,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,73,82,84,103,110,113,115,116,118,119,123,126,],[26,26,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,26,-2,-32,26,-14,26,-31,-68,-21,-15,26,-27,-29,-33,-22,-28,-30,]),'DOUBLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,73,82,84,103,110,113,115,116,118,119,123,126,],[27,27,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,27,-2,-32,27,-14,27,-31,-68,-21,-15,27,-27,-29,-33,-22,-28,-30,]),'CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,73,82,84,103,110,113,115,116,118,119,123,126,],[28,28,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,28,-2,-32,28,-14,28,-31,-68,-21,-15,28,-27,-29,-33,-22,-28,-30,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,12,13,24,43,47,55,71,73,82,84,103,110,113,115,116,118,119,123,126,],[29,29,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,29,-2,-32,29,-14,29,-31,-68,-21,-15,29,-27,-29,-33,-22,-28,-30,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,17,21,23,24,34,35,36,37,38,39,40,41,42,43,45,46,47,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,78,82,84,89,90,91,92,93,94,95,96,97,103,104,105,108,110,115,116,118,119,122,123,126,],[36,36,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-62,36,36,-65,36,65,-49,36,-53,36,-56,-57,-63,-64,-2,36,36,-32,-62,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-54,-55,-14,36,-66,-31,-68,65,65,65,65,-47,-48,-50,-51,-52,-21,-58,36,36,-15,-27,-29,-33,-22,36,-28,-30,]),'NOT':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,21,24,36,38,43,45,46,47,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,84,103,105,108,110,115,116,118,119,122,123,126,],[38,38,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,38,38,38,38,38,-2,38,38,-32,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,-14,38,-31,-68,-21,38,38,-15,-27,-29,-33,-22,38,-28,-30,]),'NUM_INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,21,24,36,38,43,45,46,47,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,84,103,105,108,110,115,116,118,119,122,123,126,],[41,41,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,41,41,41,41,41,-2,41,41,-32,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-14,41,-31,-68,-21,41,41,-15,-27,-29,-33,-22,41,-28,-30,]),'NUM_DEC':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,21,24,36,38,43,45,46,47,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,84,103,105,108,110,115,116,118,119,122,123,126,],[42,42,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,42,42,42,42,42,-2,42,42,-32,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,-14,42,-31,-68,-21,42,42,-15,-27,-29,-33,-22,42,-28,-30,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,21,24,36,38,43,45,46,47,50,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,84,103,105,108,110,115,116,118,119,122,123,126,],[23,23,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,23,23,23,23,23,-2,23,23,-32,23,23,23,83,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-14,23,-31,-68,-21,23,23,-15,-27,-29,-33,-22,23,-28,-30,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,17,18,19,20,21,22,24,36,38,43,44,45,46,47,49,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,72,82,84,103,105,108,110,115,116,118,119,122,123,126,],[17,17,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,46,17,50,51,52,17,54,17,17,17,-2,73,17,17,-32,46,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-14,17,-31,-68,-21,17,17,-15,-27,-29,-33,-22,17,-28,-30,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,43,47,71,82,84,103,110,115,116,118,119,123,126,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-32,-14,-31,-68,-21,-15,-27,-29,-33,-22,-28,-30,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,43,47,55,71,82,84,103,110,115,116,118,119,123,126,],[-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-2,-32,84,-14,-31,-68,-21,-15,-27,-29,-33,-22,-28,-30,]),'EQUALS':([15,44,],[45,72,]),'TIMES':([15,23,35,37,39,40,41,42,49,69,70,78,93,94,95,96,97,104,],[-62,-65,66,-53,-56,-57,-63,-64,-62,-54,-55,-66,66,66,-50,-51,-52,-58,]),'DIV':([15,23,35,37,39,40,41,42,49,69,70,78,93,94,95,96,97,104,],[-62,-65,67,-53,-56,-57,-63,-64,-62,-54,-55,-66,67,67,-50,-51,-52,-58,]),'MOD':([15,23,35,37,39,40,41,42,49,69,70,78,93,94,95,96,97,104,],[-62,-65,68,-53,-56,-57,-63,-64,-62,-54,-55,-66,68,68,-50,-51,-52,-58,]),'PLUS':([15,23,34,35,37,39,40,41,42,49,69,70,78,89,90,91,92,93,94,95,96,97,104,],[-62,-65,64,-49,-53,-56,-57,-63,-64,-62,-54,-55,-66,64,64,64,64,-47,-48,-50,-51,-52,-58,]),'LT':([15,23,33,34,35,37,39,40,41,42,49,69,70,78,87,88,89,90,91,92,93,94,95,96,97,104,],[-62,-65,60,-46,-49,-53,-56,-57,-63,-64,-62,-54,-55,-66,60,60,-42,-43,-44,-45,-47,-48,-50,-51,-52,-58,]),'GT':([15,23,33,34,35,37,39,40,41,42,49,69,70,78,87,88,89,90,91,92,93,94,95,96,97,104,],[-62,-65,61,-46,-49,-53,-56,-57,-63,-64,-62,-54,-55,-66,61,61,-42,-43,-44,-45,-47,-48,-50,-51,-52,-58,]),'LE':([15,23,33,34,35,37,39,40,41,42,49,69,70,78,87,88,89,90,91,92,93,94,95,96,97,104,],[-62,-65,62,-46,-49,-53,-56,-57,-63,-64,-62,-54,-55,-66,62,62,-42,-43,-44,-45,-47,-48,-50,-51,-52,-58,]),'GE':([15,23,33,34,35,37,39,40,41,42,49,69,70,78,87,88,89,90,91,92,93,94,95,96,97,104,],[-62,-65,63,-46,-49,-53,-56,-57,-63,-64,-62,-54,-55,-66,63,63,-42,-43,-44,-45,-47,-48,-50,-51,-52,-58,]),'EQ':([15,23,32,33,34,35,37,39,40,41,42,49,69,70,78,86,87,88,89,90,91,92,93,94,95,96,97,104,],[-62,-65,58,-41,-46,-49,-53,-56,-57,-63,-64,-62,-54,-55,-66,58,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-52,-58,]),'NE':([15,23,32,33,34,35,37,39,40,41,42,49,69,70,78,86,87,88,89,90,91,92,93,94,95,96,97,104,],[-62,-65,59,-41,-46,-49,-53,-56,-57,-63,-64,-62,-54,-55,-66,59,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-52,-58,]),'AND':([15,23,31,32,33,34,35,37,39,40,41,42,49,69,70,78,85,86,87,88,89,90,91,92,93,94,95,96,97,104,],[-62,-65,57,-38,-41,-46,-49,-53,-56,-57,-63,-64,-62,-54,-55,-66,57,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-52,-58,]),'OR':([15,23,30,31,32,33,34,35,37,39,40,41,42,49,69,70,78,85,86,87,88,89,90,91,92,93,94,95,96,97,104,],[-62,-65,56,-36,-38,-41,-46,-49,-53,-56,-57,-63,-64,-62,-54,-55,-66,-35,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-52,-58,]),'SEMICOLON':([15,16,23,30,31,32,33,34,35,37,39,40,41,42,44,49,53,69,70,74,78,81,85,86,87,88,89,90,91,92,93,94,95,96,97,98,104,109,117,],[-62,47,-65,-34,-36,-38,-41,-46,-49,-53,-56,-57,-63,-64,71,-62,82,-54,-55,103,-66,108,-35,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-52,110,-58,118,122,]),'RPAREN':([23,30,31,32,33,34,35,37,39,40,41,42,46,48,49,69,70,73,75,76,77,78,79,80,83,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,102,104,111,114,120,124,],[-65,-34,-36,-38,-41,-46,-49,-53,-56,-57,-63,-64,-67,78,-62,-54,-55,-67,104,-60,-61,-66,106,107,109,-35,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-52,112,-24,-25,-58,-26,-59,-23,125,]),'COMMA':([23,30,31,32,33,34,35,37,39,40,41,42,46,49,69,70,73,75,76,77,78,85,86,87,88,89,90,91,92,93,94,95,96,97,100,101,102,104,111,114,120,],[-65,-34,-36,-38,-41,-46,-49,-53,-56,-57,-63,-64,-67,-62,-54,-55,-67,105,-60,-61,-66,-35,-37,-39,-40,-42,-43,-44,-45,-47,-48,-50,-51,-52,113,-24,-25,-58,-26,-59,-23,]),'ELSE':([84,115,],[-68,121,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,24,],[2,55,]),'statement':([0,2,24,55,],[3,43,3,43,]),'var_declaration':([0,2,24,55,],[4,4,4,4,]),'assignment':([0,2,24,55,],[5,5,5,5,]),'function_declaration':([0,2,24,55,],[6,6,6,6,]),'if_statement':([0,2,24,55,],[7,7,7,7,]),'while_statement':([0,2,24,55,],[8,8,8,8,]),'for_statement':([0,2,24,55,],[9,9,9,9,]),'return_statement':([0,2,24,55,],[10,10,10,10,]),'expression_statement':([0,2,24,55,],[11,11,11,11,]),'print_statement':([0,2,24,55,],[12,12,12,12,]),'compound_statement':([0,2,24,55,106,107,112,121,125,],[13,13,13,13,115,116,119,123,126,]),'type_specifier':([0,2,24,55,73,113,],[14,14,14,14,99,99,]),'expression':([0,2,17,21,24,45,46,50,51,52,55,72,105,108,122,],[16,16,48,53,16,74,76,79,80,81,16,98,114,117,124,]),'logical_or_expression':([0,2,17,21,24,45,46,50,51,52,55,72,105,108,122,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'logical_and_expression':([0,2,17,21,24,45,46,50,51,52,55,56,72,105,108,122,],[31,31,31,31,31,31,31,31,31,31,31,85,31,31,31,31,]),'equality_expression':([0,2,17,21,24,45,46,50,51,52,55,56,57,72,105,108,122,],[32,32,32,32,32,32,32,32,32,32,32,32,86,32,32,32,32,]),'relational_expression':([0,2,17,21,24,45,46,50,51,52,55,56,57,58,59,72,105,108,122,],[33,33,33,33,33,33,33,33,33,33,33,33,33,87,88,33,33,33,33,]),'additive_expression':([0,2,17,21,24,45,46,50,51,52,55,56,57,58,59,60,61,62,63,72,105,108,122,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,89,90,91,92,34,34,34,34,]),'multiplicative_expression':([0,2,17,21,24,45,46,50,51,52,55,56,57,58,59,60,61,62,63,64,65,72,105,108,122,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,93,94,35,35,35,35,]),'unary_expression':([0,2,17,21,24,36,38,45,46,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,108,122,],[37,37,37,37,37,69,70,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,95,96,97,37,37,37,37,]),'postfix_expression':([0,2,17,21,24,36,38,45,46,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,108,122,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'primary_expression':([0,2,17,21,24,36,38,45,46,50,51,52,55,56,57,58,59,60,61,62,63,64,65,66,67,68,72,105,108,122,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'argument_list':([46,],[75,]),'empty':([46,73,],[77,102,]),'parameter_list':([73,],[100,]),'parameter':([73,113,],[101,120,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','comp.py',102),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','comp.py',106),
  ('statement_list -> statement','statement_list',1,'p_statement_list','comp.py',107),
  ('statement -> var_declaration','statement',1,'p_statement','comp.py',114),
  ('statement -> assignment','statement',1,'p_statement','comp.py',115),
  ('statement -> function_declaration','statement',1,'p_statement','comp.py',116),
  ('statement -> if_statement','statement',1,'p_statement','comp.py',117),
  ('statement -> while_statement','statement',1,'p_statement','comp.py',118),
  ('statement -> for_statement','statement',1,'p_statement','comp.py',119),
  ('statement -> return_statement','statement',1,'p_statement','comp.py',120),
  ('statement -> expression_statement','statement',1,'p_statement','comp.py',121),
  ('statement -> print_statement','statement',1,'p_statement','comp.py',122),
  ('statement -> compound_statement','statement',1,'p_statement','comp.py',123),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','comp.py',127),
  ('var_declaration -> type_specifier ID EQUALS expression SEMICOLON','var_declaration',5,'p_var_declaration','comp.py',128),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','comp.py',138),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','comp.py',139),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','comp.py',140),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','comp.py',141),
  ('type_specifier -> BOOLEAN','type_specifier',1,'p_type_specifier','comp.py',142),
  ('assignment -> ID EQUALS expression SEMICOLON','assignment',4,'p_assignment','comp.py',146),
  ('function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement','function_declaration',6,'p_function_declaration','comp.py',154),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','comp.py',159),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','comp.py',160),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','comp.py',161),
  ('parameter -> type_specifier ID','parameter',2,'p_parameter','comp.py',170),
  ('if_statement -> IF LPAREN expression RPAREN compound_statement','if_statement',5,'p_if_statement','comp.py',175),
  ('if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement','if_statement',7,'p_if_statement','comp.py',176),
  ('while_statement -> WHILE LPAREN expression RPAREN compound_statement','while_statement',5,'p_while_statement','comp.py',183),
  ('for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement','for_statement',9,'p_for_statement','comp.py',187),
  ('return_statement -> RETURN expression SEMICOLON','return_statement',3,'p_return_statement','comp.py',191),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','comp.py',195),
  ('print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON','print_statement',5,'p_print_statement','comp.py',199),
  ('expression -> logical_or_expression','expression',1,'p_expression','comp.py',203),
  ('logical_or_expression -> logical_or_expression OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','comp.py',207),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','comp.py',208),
  ('logical_and_expression -> logical_and_expression AND equality_expression','logical_and_expression',3,'p_logical_and_expression','comp.py',217),
  ('logical_and_expression -> equality_expression','logical_and_expression',1,'p_logical_and_expression','comp.py',218),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','comp.py',227),
  ('equality_expression -> equality_expression NE relational_expression','equality_expression',3,'p_equality_expression','comp.py',228),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','comp.py',229),
  ('relational_expression -> relational_expression LT additive_expression','relational_expression',3,'p_relational_expression','comp.py',237),
  ('relational_expression -> relational_expression GT additive_expression','relational_expression',3,'p_relational_expression','comp.py',238),
  ('relational_expression -> relational_expression LE additive_expression','relational_expression',3,'p_relational_expression','comp.py',239),
  ('relational_expression -> relational_expression GE additive_expression','relational_expression',3,'p_relational_expression','comp.py',240),
  ('relational_expression -> additive_expression','relational_expression',1,'p_relational_expression','comp.py',241),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','comp.py',249),
  ('additive_expression -> additive_expression MINUS multiplicative_expression','additive_expression',3,'p_additive_expression','comp.py',250),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','comp.py',251),
  ('multiplicative_expression -> multiplicative_expression TIMES unary_expression','multiplicative_expression',3,'p_multiplicative_expression','comp.py',259),
  ('multiplicative_expression -> multiplicative_expression DIV unary_expression','multiplicative_expression',3,'p_multiplicative_expression','comp.py',260),
  ('multiplicative_expression -> multiplicative_expression MOD unary_expression','multiplicative_expression',3,'p_multiplicative_expression','comp.py',261),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','comp.py',262),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','comp.py',270),
  ('unary_expression -> NOT unary_expression','unary_expression',2,'p_unary_expression','comp.py',271),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','comp.py',272),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','comp.py',283),
  ('postfix_expression -> ID LPAREN argument_list RPAREN','postfix_expression',4,'p_postfix_expression','comp.py',284),
  ('argument_list -> argument_list COMMA expression','argument_list',3,'p_argument_list','comp.py',291),
  ('argument_list -> expression','argument_list',1,'p_argument_list','comp.py',292),
  ('argument_list -> empty','argument_list',1,'p_argument_list','comp.py',293),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','comp.py',302),
  ('primary_expression -> NUM_INT','primary_expression',1,'p_primary_expression','comp.py',303),
  ('primary_expression -> NUM_DEC','primary_expression',1,'p_primary_expression','comp.py',304),
  ('primary_expression -> STRING','primary_expression',1,'p_primary_expression','comp.py',305),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','comp.py',306),
  ('empty -> <empty>','empty',0,'p_empty','comp.py',313),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','comp.py',317),
]
