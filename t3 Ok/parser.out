Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     statement -> var_declaration
Rule 5     statement -> assignment
Rule 6     statement -> function_declaration
Rule 7     statement -> if_statement
Rule 8     statement -> while_statement
Rule 9     statement -> for_statement
Rule 10    statement -> return_statement
Rule 11    statement -> expression_statement
Rule 12    statement -> print_statement
Rule 13    statement -> compound_statement
Rule 14    var_declaration -> type_specifier ID SEMICOLON
Rule 15    var_declaration -> type_specifier ID EQUALS expression SEMICOLON
Rule 16    type_specifier -> INT
Rule 17    type_specifier -> FLOAT
Rule 18    type_specifier -> DOUBLE
Rule 19    type_specifier -> CHAR
Rule 20    type_specifier -> BOOLEAN
Rule 21    assignment -> ID EQUALS expression SEMICOLON
Rule 22    function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement
Rule 23    parameter_list -> parameter_list COMMA parameter
Rule 24    parameter_list -> parameter
Rule 25    parameter_list -> empty
Rule 26    parameter -> type_specifier ID
Rule 27    if_statement -> IF LPAREN expression RPAREN compound_statement
Rule 28    if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement
Rule 29    while_statement -> WHILE LPAREN expression RPAREN compound_statement
Rule 30    for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement
Rule 31    return_statement -> RETURN expression SEMICOLON
Rule 32    expression_statement -> expression SEMICOLON
Rule 33    print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON
Rule 34    expression -> logical_or_expression
Rule 35    logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 36    logical_or_expression -> logical_and_expression
Rule 37    logical_and_expression -> logical_and_expression AND equality_expression
Rule 38    logical_and_expression -> equality_expression
Rule 39    equality_expression -> equality_expression EQ relational_expression
Rule 40    equality_expression -> equality_expression NE relational_expression
Rule 41    equality_expression -> relational_expression
Rule 42    relational_expression -> relational_expression LT additive_expression
Rule 43    relational_expression -> relational_expression GT additive_expression
Rule 44    relational_expression -> relational_expression LE additive_expression
Rule 45    relational_expression -> relational_expression GE additive_expression
Rule 46    relational_expression -> additive_expression
Rule 47    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 48    additive_expression -> additive_expression MINUS multiplicative_expression
Rule 49    additive_expression -> multiplicative_expression
Rule 50    multiplicative_expression -> multiplicative_expression TIMES unary_expression
Rule 51    multiplicative_expression -> multiplicative_expression DIV unary_expression
Rule 52    multiplicative_expression -> multiplicative_expression MOD unary_expression
Rule 53    multiplicative_expression -> unary_expression
Rule 54    unary_expression -> MINUS unary_expression
Rule 55    unary_expression -> NOT unary_expression
Rule 56    unary_expression -> postfix_expression
Rule 57    postfix_expression -> primary_expression
Rule 58    postfix_expression -> ID LPAREN argument_list RPAREN
Rule 59    argument_list -> argument_list COMMA expression
Rule 60    argument_list -> expression
Rule 61    argument_list -> empty
Rule 62    primary_expression -> ID
Rule 63    primary_expression -> NUM_INT
Rule 64    primary_expression -> NUM_DEC
Rule 65    primary_expression -> STRING
Rule 66    primary_expression -> LPAREN expression RPAREN
Rule 67    empty -> <empty>
Rule 68    compound_statement -> LBRACE statement_list RBRACE

Terminals, with rules where they appear

AND                  : 37
BOOLEAN              : 20
CHAR                 : 19
COMMA                : 23 59
DIV                  : 51
DOUBLE               : 18
ELSE                 : 28
EQ                   : 39
EQUALS               : 15 21
FLOAT                : 17
FOR                  : 30
GE                   : 45
GT                   : 43
ID                   : 14 15 21 22 26 58 62
IF                   : 27 28
INT                  : 16
LBRACE               : 68
LE                   : 44
LPAREN               : 22 27 28 29 30 33 58 66
LT                   : 42
MINUS                : 48 54
MOD                  : 52
NE                   : 40
NOT                  : 55
NUM_DEC              : 64
NUM_INT              : 63
OR                   : 35
PLUS                 : 47
PRINTLN              : 33
RBRACE               : 68
RETURN               : 31
RPAREN               : 22 27 28 29 30 33 58 66
SEMICOLON            : 14 15 21 30 30 31 32 33
STRING               : 33 65
TIMES                : 50
WHILE                : 29
error                : 

Nonterminals, with rules where they appear

additive_expression  : 42 43 44 45 46 47 48
argument_list        : 58 59
assignment           : 5
compound_statement   : 13 22 27 28 28 29 30
empty                : 25 61
equality_expression  : 37 38 39 40
expression           : 15 21 27 28 29 30 30 30 31 32 59 60 66
expression_statement : 11
for_statement        : 9
function_declaration : 6
if_statement         : 7
logical_and_expression : 35 36 37
logical_or_expression : 34 35
multiplicative_expression : 47 48 49 50 51 52
parameter            : 23 24
parameter_list       : 22 23
postfix_expression   : 56
primary_expression   : 57
print_statement      : 12
program              : 0
relational_expression : 39 40 41 42 43 44 45
return_statement     : 10
statement            : 2 3
statement_list       : 1 2 68
type_specifier       : 14 15 22 26
unary_expression     : 50 51 52 53 54 55
var_declaration      : 4
while_statement      : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . function_declaration
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . for_statement
    (10) statement -> . return_statement
    (11) statement -> . expression_statement
    (12) statement -> . print_statement
    (13) statement -> . compound_statement
    (14) var_declaration -> . type_specifier ID SEMICOLON
    (15) var_declaration -> . type_specifier ID EQUALS expression SEMICOLON
    (21) assignment -> . ID EQUALS expression SEMICOLON
    (22) function_declaration -> . type_specifier ID LPAREN parameter_list RPAREN compound_statement
    (27) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (28) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (29) while_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (30) for_statement -> . FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement
    (31) return_statement -> . RETURN expression SEMICOLON
    (32) expression_statement -> . expression SEMICOLON
    (33) print_statement -> . PRINTLN LPAREN STRING RPAREN SEMICOLON
    (68) compound_statement -> . LBRACE statement_list RBRACE
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . BOOLEAN
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 15
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    RETURN          shift and go to state 21
    PRINTLN         shift and go to state 22
    LBRACE          shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    CHAR            shift and go to state 28
    BOOLEAN         shift and go to state 29
    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    return_statement               shift and go to state 10
    expression_statement           shift and go to state 11
    print_statement                shift and go to state 12
    compound_statement             shift and go to state 13
    type_specifier                 shift and go to state 14
    expression                     shift and go to state 16
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . function_declaration
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . for_statement
    (10) statement -> . return_statement
    (11) statement -> . expression_statement
    (12) statement -> . print_statement
    (13) statement -> . compound_statement
    (14) var_declaration -> . type_specifier ID SEMICOLON
    (15) var_declaration -> . type_specifier ID EQUALS expression SEMICOLON
    (21) assignment -> . ID EQUALS expression SEMICOLON
    (22) function_declaration -> . type_specifier ID LPAREN parameter_list RPAREN compound_statement
    (27) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (28) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (29) while_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (30) for_statement -> . FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement
    (31) return_statement -> . RETURN expression SEMICOLON
    (32) expression_statement -> . expression SEMICOLON
    (33) print_statement -> . PRINTLN LPAREN STRING RPAREN SEMICOLON
    (68) compound_statement -> . LBRACE statement_list RBRACE
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . BOOLEAN
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (program -> statement_list .)
    ID              shift and go to state 15
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    RETURN          shift and go to state 21
    PRINTLN         shift and go to state 22
    LBRACE          shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    CHAR            shift and go to state 28
    BOOLEAN         shift and go to state 29
    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    statement                      shift and go to state 43
    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    return_statement               shift and go to state 10
    expression_statement           shift and go to state 11
    print_statement                shift and go to state 12
    compound_statement             shift and go to state 13
    type_specifier                 shift and go to state 14
    expression                     shift and go to state 16
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 3

    (3) statement_list -> statement .

    ID              reduce using rule 3 (statement_list -> statement .)
    IF              reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    FOR             reduce using rule 3 (statement_list -> statement .)
    RETURN          reduce using rule 3 (statement_list -> statement .)
    PRINTLN         reduce using rule 3 (statement_list -> statement .)
    LBRACE          reduce using rule 3 (statement_list -> statement .)
    INT             reduce using rule 3 (statement_list -> statement .)
    FLOAT           reduce using rule 3 (statement_list -> statement .)
    DOUBLE          reduce using rule 3 (statement_list -> statement .)
    CHAR            reduce using rule 3 (statement_list -> statement .)
    BOOLEAN         reduce using rule 3 (statement_list -> statement .)
    MINUS           reduce using rule 3 (statement_list -> statement .)
    NOT             reduce using rule 3 (statement_list -> statement .)
    NUM_INT         reduce using rule 3 (statement_list -> statement .)
    NUM_DEC         reduce using rule 3 (statement_list -> statement .)
    STRING          reduce using rule 3 (statement_list -> statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement .)


state 4

    (4) statement -> var_declaration .

    ID              reduce using rule 4 (statement -> var_declaration .)
    IF              reduce using rule 4 (statement -> var_declaration .)
    WHILE           reduce using rule 4 (statement -> var_declaration .)
    FOR             reduce using rule 4 (statement -> var_declaration .)
    RETURN          reduce using rule 4 (statement -> var_declaration .)
    PRINTLN         reduce using rule 4 (statement -> var_declaration .)
    LBRACE          reduce using rule 4 (statement -> var_declaration .)
    INT             reduce using rule 4 (statement -> var_declaration .)
    FLOAT           reduce using rule 4 (statement -> var_declaration .)
    DOUBLE          reduce using rule 4 (statement -> var_declaration .)
    CHAR            reduce using rule 4 (statement -> var_declaration .)
    BOOLEAN         reduce using rule 4 (statement -> var_declaration .)
    MINUS           reduce using rule 4 (statement -> var_declaration .)
    NOT             reduce using rule 4 (statement -> var_declaration .)
    NUM_INT         reduce using rule 4 (statement -> var_declaration .)
    NUM_DEC         reduce using rule 4 (statement -> var_declaration .)
    STRING          reduce using rule 4 (statement -> var_declaration .)
    LPAREN          reduce using rule 4 (statement -> var_declaration .)
    $end            reduce using rule 4 (statement -> var_declaration .)
    RBRACE          reduce using rule 4 (statement -> var_declaration .)


state 5

    (5) statement -> assignment .

    ID              reduce using rule 5 (statement -> assignment .)
    IF              reduce using rule 5 (statement -> assignment .)
    WHILE           reduce using rule 5 (statement -> assignment .)
    FOR             reduce using rule 5 (statement -> assignment .)
    RETURN          reduce using rule 5 (statement -> assignment .)
    PRINTLN         reduce using rule 5 (statement -> assignment .)
    LBRACE          reduce using rule 5 (statement -> assignment .)
    INT             reduce using rule 5 (statement -> assignment .)
    FLOAT           reduce using rule 5 (statement -> assignment .)
    DOUBLE          reduce using rule 5 (statement -> assignment .)
    CHAR            reduce using rule 5 (statement -> assignment .)
    BOOLEAN         reduce using rule 5 (statement -> assignment .)
    MINUS           reduce using rule 5 (statement -> assignment .)
    NOT             reduce using rule 5 (statement -> assignment .)
    NUM_INT         reduce using rule 5 (statement -> assignment .)
    NUM_DEC         reduce using rule 5 (statement -> assignment .)
    STRING          reduce using rule 5 (statement -> assignment .)
    LPAREN          reduce using rule 5 (statement -> assignment .)
    $end            reduce using rule 5 (statement -> assignment .)
    RBRACE          reduce using rule 5 (statement -> assignment .)


state 6

    (6) statement -> function_declaration .

    ID              reduce using rule 6 (statement -> function_declaration .)
    IF              reduce using rule 6 (statement -> function_declaration .)
    WHILE           reduce using rule 6 (statement -> function_declaration .)
    FOR             reduce using rule 6 (statement -> function_declaration .)
    RETURN          reduce using rule 6 (statement -> function_declaration .)
    PRINTLN         reduce using rule 6 (statement -> function_declaration .)
    LBRACE          reduce using rule 6 (statement -> function_declaration .)
    INT             reduce using rule 6 (statement -> function_declaration .)
    FLOAT           reduce using rule 6 (statement -> function_declaration .)
    DOUBLE          reduce using rule 6 (statement -> function_declaration .)
    CHAR            reduce using rule 6 (statement -> function_declaration .)
    BOOLEAN         reduce using rule 6 (statement -> function_declaration .)
    MINUS           reduce using rule 6 (statement -> function_declaration .)
    NOT             reduce using rule 6 (statement -> function_declaration .)
    NUM_INT         reduce using rule 6 (statement -> function_declaration .)
    NUM_DEC         reduce using rule 6 (statement -> function_declaration .)
    STRING          reduce using rule 6 (statement -> function_declaration .)
    LPAREN          reduce using rule 6 (statement -> function_declaration .)
    $end            reduce using rule 6 (statement -> function_declaration .)
    RBRACE          reduce using rule 6 (statement -> function_declaration .)


state 7

    (7) statement -> if_statement .

    ID              reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    WHILE           reduce using rule 7 (statement -> if_statement .)
    FOR             reduce using rule 7 (statement -> if_statement .)
    RETURN          reduce using rule 7 (statement -> if_statement .)
    PRINTLN         reduce using rule 7 (statement -> if_statement .)
    LBRACE          reduce using rule 7 (statement -> if_statement .)
    INT             reduce using rule 7 (statement -> if_statement .)
    FLOAT           reduce using rule 7 (statement -> if_statement .)
    DOUBLE          reduce using rule 7 (statement -> if_statement .)
    CHAR            reduce using rule 7 (statement -> if_statement .)
    BOOLEAN         reduce using rule 7 (statement -> if_statement .)
    MINUS           reduce using rule 7 (statement -> if_statement .)
    NOT             reduce using rule 7 (statement -> if_statement .)
    NUM_INT         reduce using rule 7 (statement -> if_statement .)
    NUM_DEC         reduce using rule 7 (statement -> if_statement .)
    STRING          reduce using rule 7 (statement -> if_statement .)
    LPAREN          reduce using rule 7 (statement -> if_statement .)
    $end            reduce using rule 7 (statement -> if_statement .)
    RBRACE          reduce using rule 7 (statement -> if_statement .)


state 8

    (8) statement -> while_statement .

    ID              reduce using rule 8 (statement -> while_statement .)
    IF              reduce using rule 8 (statement -> while_statement .)
    WHILE           reduce using rule 8 (statement -> while_statement .)
    FOR             reduce using rule 8 (statement -> while_statement .)
    RETURN          reduce using rule 8 (statement -> while_statement .)
    PRINTLN         reduce using rule 8 (statement -> while_statement .)
    LBRACE          reduce using rule 8 (statement -> while_statement .)
    INT             reduce using rule 8 (statement -> while_statement .)
    FLOAT           reduce using rule 8 (statement -> while_statement .)
    DOUBLE          reduce using rule 8 (statement -> while_statement .)
    CHAR            reduce using rule 8 (statement -> while_statement .)
    BOOLEAN         reduce using rule 8 (statement -> while_statement .)
    MINUS           reduce using rule 8 (statement -> while_statement .)
    NOT             reduce using rule 8 (statement -> while_statement .)
    NUM_INT         reduce using rule 8 (statement -> while_statement .)
    NUM_DEC         reduce using rule 8 (statement -> while_statement .)
    STRING          reduce using rule 8 (statement -> while_statement .)
    LPAREN          reduce using rule 8 (statement -> while_statement .)
    $end            reduce using rule 8 (statement -> while_statement .)
    RBRACE          reduce using rule 8 (statement -> while_statement .)


state 9

    (9) statement -> for_statement .

    ID              reduce using rule 9 (statement -> for_statement .)
    IF              reduce using rule 9 (statement -> for_statement .)
    WHILE           reduce using rule 9 (statement -> for_statement .)
    FOR             reduce using rule 9 (statement -> for_statement .)
    RETURN          reduce using rule 9 (statement -> for_statement .)
    PRINTLN         reduce using rule 9 (statement -> for_statement .)
    LBRACE          reduce using rule 9 (statement -> for_statement .)
    INT             reduce using rule 9 (statement -> for_statement .)
    FLOAT           reduce using rule 9 (statement -> for_statement .)
    DOUBLE          reduce using rule 9 (statement -> for_statement .)
    CHAR            reduce using rule 9 (statement -> for_statement .)
    BOOLEAN         reduce using rule 9 (statement -> for_statement .)
    MINUS           reduce using rule 9 (statement -> for_statement .)
    NOT             reduce using rule 9 (statement -> for_statement .)
    NUM_INT         reduce using rule 9 (statement -> for_statement .)
    NUM_DEC         reduce using rule 9 (statement -> for_statement .)
    STRING          reduce using rule 9 (statement -> for_statement .)
    LPAREN          reduce using rule 9 (statement -> for_statement .)
    $end            reduce using rule 9 (statement -> for_statement .)
    RBRACE          reduce using rule 9 (statement -> for_statement .)


state 10

    (10) statement -> return_statement .

    ID              reduce using rule 10 (statement -> return_statement .)
    IF              reduce using rule 10 (statement -> return_statement .)
    WHILE           reduce using rule 10 (statement -> return_statement .)
    FOR             reduce using rule 10 (statement -> return_statement .)
    RETURN          reduce using rule 10 (statement -> return_statement .)
    PRINTLN         reduce using rule 10 (statement -> return_statement .)
    LBRACE          reduce using rule 10 (statement -> return_statement .)
    INT             reduce using rule 10 (statement -> return_statement .)
    FLOAT           reduce using rule 10 (statement -> return_statement .)
    DOUBLE          reduce using rule 10 (statement -> return_statement .)
    CHAR            reduce using rule 10 (statement -> return_statement .)
    BOOLEAN         reduce using rule 10 (statement -> return_statement .)
    MINUS           reduce using rule 10 (statement -> return_statement .)
    NOT             reduce using rule 10 (statement -> return_statement .)
    NUM_INT         reduce using rule 10 (statement -> return_statement .)
    NUM_DEC         reduce using rule 10 (statement -> return_statement .)
    STRING          reduce using rule 10 (statement -> return_statement .)
    LPAREN          reduce using rule 10 (statement -> return_statement .)
    $end            reduce using rule 10 (statement -> return_statement .)
    RBRACE          reduce using rule 10 (statement -> return_statement .)


state 11

    (11) statement -> expression_statement .

    ID              reduce using rule 11 (statement -> expression_statement .)
    IF              reduce using rule 11 (statement -> expression_statement .)
    WHILE           reduce using rule 11 (statement -> expression_statement .)
    FOR             reduce using rule 11 (statement -> expression_statement .)
    RETURN          reduce using rule 11 (statement -> expression_statement .)
    PRINTLN         reduce using rule 11 (statement -> expression_statement .)
    LBRACE          reduce using rule 11 (statement -> expression_statement .)
    INT             reduce using rule 11 (statement -> expression_statement .)
    FLOAT           reduce using rule 11 (statement -> expression_statement .)
    DOUBLE          reduce using rule 11 (statement -> expression_statement .)
    CHAR            reduce using rule 11 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 11 (statement -> expression_statement .)
    MINUS           reduce using rule 11 (statement -> expression_statement .)
    NOT             reduce using rule 11 (statement -> expression_statement .)
    NUM_INT         reduce using rule 11 (statement -> expression_statement .)
    NUM_DEC         reduce using rule 11 (statement -> expression_statement .)
    STRING          reduce using rule 11 (statement -> expression_statement .)
    LPAREN          reduce using rule 11 (statement -> expression_statement .)
    $end            reduce using rule 11 (statement -> expression_statement .)
    RBRACE          reduce using rule 11 (statement -> expression_statement .)


state 12

    (12) statement -> print_statement .

    ID              reduce using rule 12 (statement -> print_statement .)
    IF              reduce using rule 12 (statement -> print_statement .)
    WHILE           reduce using rule 12 (statement -> print_statement .)
    FOR             reduce using rule 12 (statement -> print_statement .)
    RETURN          reduce using rule 12 (statement -> print_statement .)
    PRINTLN         reduce using rule 12 (statement -> print_statement .)
    LBRACE          reduce using rule 12 (statement -> print_statement .)
    INT             reduce using rule 12 (statement -> print_statement .)
    FLOAT           reduce using rule 12 (statement -> print_statement .)
    DOUBLE          reduce using rule 12 (statement -> print_statement .)
    CHAR            reduce using rule 12 (statement -> print_statement .)
    BOOLEAN         reduce using rule 12 (statement -> print_statement .)
    MINUS           reduce using rule 12 (statement -> print_statement .)
    NOT             reduce using rule 12 (statement -> print_statement .)
    NUM_INT         reduce using rule 12 (statement -> print_statement .)
    NUM_DEC         reduce using rule 12 (statement -> print_statement .)
    STRING          reduce using rule 12 (statement -> print_statement .)
    LPAREN          reduce using rule 12 (statement -> print_statement .)
    $end            reduce using rule 12 (statement -> print_statement .)
    RBRACE          reduce using rule 12 (statement -> print_statement .)


state 13

    (13) statement -> compound_statement .

    ID              reduce using rule 13 (statement -> compound_statement .)
    IF              reduce using rule 13 (statement -> compound_statement .)
    WHILE           reduce using rule 13 (statement -> compound_statement .)
    FOR             reduce using rule 13 (statement -> compound_statement .)
    RETURN          reduce using rule 13 (statement -> compound_statement .)
    PRINTLN         reduce using rule 13 (statement -> compound_statement .)
    LBRACE          reduce using rule 13 (statement -> compound_statement .)
    INT             reduce using rule 13 (statement -> compound_statement .)
    FLOAT           reduce using rule 13 (statement -> compound_statement .)
    DOUBLE          reduce using rule 13 (statement -> compound_statement .)
    CHAR            reduce using rule 13 (statement -> compound_statement .)
    BOOLEAN         reduce using rule 13 (statement -> compound_statement .)
    MINUS           reduce using rule 13 (statement -> compound_statement .)
    NOT             reduce using rule 13 (statement -> compound_statement .)
    NUM_INT         reduce using rule 13 (statement -> compound_statement .)
    NUM_DEC         reduce using rule 13 (statement -> compound_statement .)
    STRING          reduce using rule 13 (statement -> compound_statement .)
    LPAREN          reduce using rule 13 (statement -> compound_statement .)
    $end            reduce using rule 13 (statement -> compound_statement .)
    RBRACE          reduce using rule 13 (statement -> compound_statement .)


state 14

    (14) var_declaration -> type_specifier . ID SEMICOLON
    (15) var_declaration -> type_specifier . ID EQUALS expression SEMICOLON
    (22) function_declaration -> type_specifier . ID LPAREN parameter_list RPAREN compound_statement

    ID              shift and go to state 44


state 15

    (21) assignment -> ID . EQUALS expression SEMICOLON
    (58) postfix_expression -> ID . LPAREN argument_list RPAREN
    (62) primary_expression -> ID .

    EQUALS          shift and go to state 45
    LPAREN          shift and go to state 46
    TIMES           reduce using rule 62 (primary_expression -> ID .)
    DIV             reduce using rule 62 (primary_expression -> ID .)
    MOD             reduce using rule 62 (primary_expression -> ID .)
    PLUS            reduce using rule 62 (primary_expression -> ID .)
    MINUS           reduce using rule 62 (primary_expression -> ID .)
    LT              reduce using rule 62 (primary_expression -> ID .)
    GT              reduce using rule 62 (primary_expression -> ID .)
    LE              reduce using rule 62 (primary_expression -> ID .)
    GE              reduce using rule 62 (primary_expression -> ID .)
    EQ              reduce using rule 62 (primary_expression -> ID .)
    NE              reduce using rule 62 (primary_expression -> ID .)
    AND             reduce using rule 62 (primary_expression -> ID .)
    OR              reduce using rule 62 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 62 (primary_expression -> ID .)


state 16

    (32) expression_statement -> expression . SEMICOLON

    SEMICOLON       shift and go to state 47


state 17

    (66) primary_expression -> LPAREN . expression RPAREN
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 48
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 18

    (27) if_statement -> IF . LPAREN expression RPAREN compound_statement
    (28) if_statement -> IF . LPAREN expression RPAREN compound_statement ELSE compound_statement

    LPAREN          shift and go to state 50


state 19

    (29) while_statement -> WHILE . LPAREN expression RPAREN compound_statement

    LPAREN          shift and go to state 51


state 20

    (30) for_statement -> FOR . LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement

    LPAREN          shift and go to state 52


state 21

    (31) return_statement -> RETURN . expression SEMICOLON
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 53
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 22

    (33) print_statement -> PRINTLN . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 54


state 23

    (65) primary_expression -> STRING .

    TIMES           reduce using rule 65 (primary_expression -> STRING .)
    DIV             reduce using rule 65 (primary_expression -> STRING .)
    MOD             reduce using rule 65 (primary_expression -> STRING .)
    PLUS            reduce using rule 65 (primary_expression -> STRING .)
    MINUS           reduce using rule 65 (primary_expression -> STRING .)
    LT              reduce using rule 65 (primary_expression -> STRING .)
    GT              reduce using rule 65 (primary_expression -> STRING .)
    LE              reduce using rule 65 (primary_expression -> STRING .)
    GE              reduce using rule 65 (primary_expression -> STRING .)
    EQ              reduce using rule 65 (primary_expression -> STRING .)
    NE              reduce using rule 65 (primary_expression -> STRING .)
    AND             reduce using rule 65 (primary_expression -> STRING .)
    OR              reduce using rule 65 (primary_expression -> STRING .)
    SEMICOLON       reduce using rule 65 (primary_expression -> STRING .)
    RPAREN          reduce using rule 65 (primary_expression -> STRING .)
    COMMA           reduce using rule 65 (primary_expression -> STRING .)


state 24

    (68) compound_statement -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . function_declaration
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . for_statement
    (10) statement -> . return_statement
    (11) statement -> . expression_statement
    (12) statement -> . print_statement
    (13) statement -> . compound_statement
    (14) var_declaration -> . type_specifier ID SEMICOLON
    (15) var_declaration -> . type_specifier ID EQUALS expression SEMICOLON
    (21) assignment -> . ID EQUALS expression SEMICOLON
    (22) function_declaration -> . type_specifier ID LPAREN parameter_list RPAREN compound_statement
    (27) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (28) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (29) while_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (30) for_statement -> . FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement
    (31) return_statement -> . RETURN expression SEMICOLON
    (32) expression_statement -> . expression SEMICOLON
    (33) print_statement -> . PRINTLN LPAREN STRING RPAREN SEMICOLON
    (68) compound_statement -> . LBRACE statement_list RBRACE
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . BOOLEAN
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    ID              shift and go to state 15
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    RETURN          shift and go to state 21
    PRINTLN         shift and go to state 22
    LBRACE          shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    CHAR            shift and go to state 28
    BOOLEAN         shift and go to state 29
    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    statement_list                 shift and go to state 55
    statement                      shift and go to state 3
    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    return_statement               shift and go to state 10
    expression_statement           shift and go to state 11
    print_statement                shift and go to state 12
    compound_statement             shift and go to state 13
    type_specifier                 shift and go to state 14
    expression                     shift and go to state 16
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 25

    (16) type_specifier -> INT .

    ID              reduce using rule 16 (type_specifier -> INT .)


state 26

    (17) type_specifier -> FLOAT .

    ID              reduce using rule 17 (type_specifier -> FLOAT .)


state 27

    (18) type_specifier -> DOUBLE .

    ID              reduce using rule 18 (type_specifier -> DOUBLE .)


state 28

    (19) type_specifier -> CHAR .

    ID              reduce using rule 19 (type_specifier -> CHAR .)


state 29

    (20) type_specifier -> BOOLEAN .

    ID              reduce using rule 20 (type_specifier -> BOOLEAN .)


state 30

    (34) expression -> logical_or_expression .
    (35) logical_or_expression -> logical_or_expression . OR logical_and_expression

    SEMICOLON       reduce using rule 34 (expression -> logical_or_expression .)
    RPAREN          reduce using rule 34 (expression -> logical_or_expression .)
    COMMA           reduce using rule 34 (expression -> logical_or_expression .)
    OR              shift and go to state 56


state 31

    (36) logical_or_expression -> logical_and_expression .
    (37) logical_and_expression -> logical_and_expression . AND equality_expression

    OR              reduce using rule 36 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 36 (logical_or_expression -> logical_and_expression .)
    RPAREN          reduce using rule 36 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 36 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 57


state 32

    (38) logical_and_expression -> equality_expression .
    (39) equality_expression -> equality_expression . EQ relational_expression
    (40) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 38 (logical_and_expression -> equality_expression .)
    OR              reduce using rule 38 (logical_and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 38 (logical_and_expression -> equality_expression .)
    RPAREN          reduce using rule 38 (logical_and_expression -> equality_expression .)
    COMMA           reduce using rule 38 (logical_and_expression -> equality_expression .)
    EQ              shift and go to state 58
    NE              shift and go to state 59


state 33

    (41) equality_expression -> relational_expression .
    (42) relational_expression -> relational_expression . LT additive_expression
    (43) relational_expression -> relational_expression . GT additive_expression
    (44) relational_expression -> relational_expression . LE additive_expression
    (45) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 41 (equality_expression -> relational_expression .)
    NE              reduce using rule 41 (equality_expression -> relational_expression .)
    AND             reduce using rule 41 (equality_expression -> relational_expression .)
    OR              reduce using rule 41 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 41 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 41 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 41 (equality_expression -> relational_expression .)
    LT              shift and go to state 60
    GT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63


state 34

    (46) relational_expression -> additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 46 (relational_expression -> additive_expression .)
    GT              reduce using rule 46 (relational_expression -> additive_expression .)
    LE              reduce using rule 46 (relational_expression -> additive_expression .)
    GE              reduce using rule 46 (relational_expression -> additive_expression .)
    EQ              reduce using rule 46 (relational_expression -> additive_expression .)
    NE              reduce using rule 46 (relational_expression -> additive_expression .)
    AND             reduce using rule 46 (relational_expression -> additive_expression .)
    OR              reduce using rule 46 (relational_expression -> additive_expression .)
    SEMICOLON       reduce using rule 46 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 46 (relational_expression -> additive_expression .)
    COMMA           reduce using rule 46 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65


state 35

    (49) additive_expression -> multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (51) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (52) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 49 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 49 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 49 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 49 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 49 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 49 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 49 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 49 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 49 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 49 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 49 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 49 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 49 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68


state 36

    (54) unary_expression -> MINUS . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    unary_expression               shift and go to state 69
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 37

    (53) multiplicative_expression -> unary_expression .

    TIMES           reduce using rule 53 (multiplicative_expression -> unary_expression .)
    DIV             reduce using rule 53 (multiplicative_expression -> unary_expression .)
    MOD             reduce using rule 53 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 53 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 53 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 53 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 53 (multiplicative_expression -> unary_expression .)
    LE              reduce using rule 53 (multiplicative_expression -> unary_expression .)
    GE              reduce using rule 53 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 53 (multiplicative_expression -> unary_expression .)
    NE              reduce using rule 53 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 53 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 53 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 53 (multiplicative_expression -> unary_expression .)
    RPAREN          reduce using rule 53 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 53 (multiplicative_expression -> unary_expression .)


state 38

    (55) unary_expression -> NOT . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    unary_expression               shift and go to state 70
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 39

    (56) unary_expression -> postfix_expression .

    TIMES           reduce using rule 56 (unary_expression -> postfix_expression .)
    DIV             reduce using rule 56 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 56 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 56 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 56 (unary_expression -> postfix_expression .)
    LT              reduce using rule 56 (unary_expression -> postfix_expression .)
    GT              reduce using rule 56 (unary_expression -> postfix_expression .)
    LE              reduce using rule 56 (unary_expression -> postfix_expression .)
    GE              reduce using rule 56 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 56 (unary_expression -> postfix_expression .)
    NE              reduce using rule 56 (unary_expression -> postfix_expression .)
    AND             reduce using rule 56 (unary_expression -> postfix_expression .)
    OR              reduce using rule 56 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 56 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 56 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 56 (unary_expression -> postfix_expression .)


state 40

    (57) postfix_expression -> primary_expression .

    TIMES           reduce using rule 57 (postfix_expression -> primary_expression .)
    DIV             reduce using rule 57 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 57 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 57 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 57 (postfix_expression -> primary_expression .)
    LT              reduce using rule 57 (postfix_expression -> primary_expression .)
    GT              reduce using rule 57 (postfix_expression -> primary_expression .)
    LE              reduce using rule 57 (postfix_expression -> primary_expression .)
    GE              reduce using rule 57 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 57 (postfix_expression -> primary_expression .)
    NE              reduce using rule 57 (postfix_expression -> primary_expression .)
    AND             reduce using rule 57 (postfix_expression -> primary_expression .)
    OR              reduce using rule 57 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 57 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 57 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 57 (postfix_expression -> primary_expression .)


state 41

    (63) primary_expression -> NUM_INT .

    TIMES           reduce using rule 63 (primary_expression -> NUM_INT .)
    DIV             reduce using rule 63 (primary_expression -> NUM_INT .)
    MOD             reduce using rule 63 (primary_expression -> NUM_INT .)
    PLUS            reduce using rule 63 (primary_expression -> NUM_INT .)
    MINUS           reduce using rule 63 (primary_expression -> NUM_INT .)
    LT              reduce using rule 63 (primary_expression -> NUM_INT .)
    GT              reduce using rule 63 (primary_expression -> NUM_INT .)
    LE              reduce using rule 63 (primary_expression -> NUM_INT .)
    GE              reduce using rule 63 (primary_expression -> NUM_INT .)
    EQ              reduce using rule 63 (primary_expression -> NUM_INT .)
    NE              reduce using rule 63 (primary_expression -> NUM_INT .)
    AND             reduce using rule 63 (primary_expression -> NUM_INT .)
    OR              reduce using rule 63 (primary_expression -> NUM_INT .)
    SEMICOLON       reduce using rule 63 (primary_expression -> NUM_INT .)
    RPAREN          reduce using rule 63 (primary_expression -> NUM_INT .)
    COMMA           reduce using rule 63 (primary_expression -> NUM_INT .)


state 42

    (64) primary_expression -> NUM_DEC .

    TIMES           reduce using rule 64 (primary_expression -> NUM_DEC .)
    DIV             reduce using rule 64 (primary_expression -> NUM_DEC .)
    MOD             reduce using rule 64 (primary_expression -> NUM_DEC .)
    PLUS            reduce using rule 64 (primary_expression -> NUM_DEC .)
    MINUS           reduce using rule 64 (primary_expression -> NUM_DEC .)
    LT              reduce using rule 64 (primary_expression -> NUM_DEC .)
    GT              reduce using rule 64 (primary_expression -> NUM_DEC .)
    LE              reduce using rule 64 (primary_expression -> NUM_DEC .)
    GE              reduce using rule 64 (primary_expression -> NUM_DEC .)
    EQ              reduce using rule 64 (primary_expression -> NUM_DEC .)
    NE              reduce using rule 64 (primary_expression -> NUM_DEC .)
    AND             reduce using rule 64 (primary_expression -> NUM_DEC .)
    OR              reduce using rule 64 (primary_expression -> NUM_DEC .)
    SEMICOLON       reduce using rule 64 (primary_expression -> NUM_DEC .)
    RPAREN          reduce using rule 64 (primary_expression -> NUM_DEC .)
    COMMA           reduce using rule 64 (primary_expression -> NUM_DEC .)


state 43

    (2) statement_list -> statement_list statement .

    ID              reduce using rule 2 (statement_list -> statement_list statement .)
    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 2 (statement_list -> statement_list statement .)
    PRINTLN         reduce using rule 2 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 2 (statement_list -> statement_list statement .)
    INT             reduce using rule 2 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 2 (statement_list -> statement_list statement .)
    DOUBLE          reduce using rule 2 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 2 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 2 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 2 (statement_list -> statement_list statement .)
    NOT             reduce using rule 2 (statement_list -> statement_list statement .)
    NUM_INT         reduce using rule 2 (statement_list -> statement_list statement .)
    NUM_DEC         reduce using rule 2 (statement_list -> statement_list statement .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)


state 44

    (14) var_declaration -> type_specifier ID . SEMICOLON
    (15) var_declaration -> type_specifier ID . EQUALS expression SEMICOLON
    (22) function_declaration -> type_specifier ID . LPAREN parameter_list RPAREN compound_statement

    SEMICOLON       shift and go to state 71
    EQUALS          shift and go to state 72
    LPAREN          shift and go to state 73


state 45

    (21) assignment -> ID EQUALS . expression SEMICOLON
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 74
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 46

    (58) postfix_expression -> ID LPAREN . argument_list RPAREN
    (59) argument_list -> . argument_list COMMA expression
    (60) argument_list -> . expression
    (61) argument_list -> . empty
    (34) expression -> . logical_or_expression
    (67) empty -> .
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    RPAREN          reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    argument_list                  shift and go to state 75
    expression                     shift and go to state 76
    empty                          shift and go to state 77
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 47

    (32) expression_statement -> expression SEMICOLON .

    ID              reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    IF              reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    WHILE           reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    FOR             reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    RETURN          reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    PRINTLN         reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    LBRACE          reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    INT             reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    FLOAT           reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    DOUBLE          reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    CHAR            reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    BOOLEAN         reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    MINUS           reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    NOT             reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    NUM_INT         reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    NUM_DEC         reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    STRING          reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    LPAREN          reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    $end            reduce using rule 32 (expression_statement -> expression SEMICOLON .)
    RBRACE          reduce using rule 32 (expression_statement -> expression SEMICOLON .)


state 48

    (66) primary_expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 78


state 49

    (58) postfix_expression -> ID . LPAREN argument_list RPAREN
    (62) primary_expression -> ID .

    LPAREN          shift and go to state 46
    TIMES           reduce using rule 62 (primary_expression -> ID .)
    DIV             reduce using rule 62 (primary_expression -> ID .)
    MOD             reduce using rule 62 (primary_expression -> ID .)
    PLUS            reduce using rule 62 (primary_expression -> ID .)
    MINUS           reduce using rule 62 (primary_expression -> ID .)
    LT              reduce using rule 62 (primary_expression -> ID .)
    GT              reduce using rule 62 (primary_expression -> ID .)
    LE              reduce using rule 62 (primary_expression -> ID .)
    GE              reduce using rule 62 (primary_expression -> ID .)
    EQ              reduce using rule 62 (primary_expression -> ID .)
    NE              reduce using rule 62 (primary_expression -> ID .)
    AND             reduce using rule 62 (primary_expression -> ID .)
    OR              reduce using rule 62 (primary_expression -> ID .)
    RPAREN          reduce using rule 62 (primary_expression -> ID .)
    SEMICOLON       reduce using rule 62 (primary_expression -> ID .)
    COMMA           reduce using rule 62 (primary_expression -> ID .)


state 50

    (27) if_statement -> IF LPAREN . expression RPAREN compound_statement
    (28) if_statement -> IF LPAREN . expression RPAREN compound_statement ELSE compound_statement
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 79
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 51

    (29) while_statement -> WHILE LPAREN . expression RPAREN compound_statement
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 80
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 52

    (30) for_statement -> FOR LPAREN . expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 81
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 53

    (31) return_statement -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 82


state 54

    (33) print_statement -> PRINTLN LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 83


state 55

    (68) compound_statement -> LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (4) statement -> . var_declaration
    (5) statement -> . assignment
    (6) statement -> . function_declaration
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . for_statement
    (10) statement -> . return_statement
    (11) statement -> . expression_statement
    (12) statement -> . print_statement
    (13) statement -> . compound_statement
    (14) var_declaration -> . type_specifier ID SEMICOLON
    (15) var_declaration -> . type_specifier ID EQUALS expression SEMICOLON
    (21) assignment -> . ID EQUALS expression SEMICOLON
    (22) function_declaration -> . type_specifier ID LPAREN parameter_list RPAREN compound_statement
    (27) if_statement -> . IF LPAREN expression RPAREN compound_statement
    (28) if_statement -> . IF LPAREN expression RPAREN compound_statement ELSE compound_statement
    (29) while_statement -> . WHILE LPAREN expression RPAREN compound_statement
    (30) for_statement -> . FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement
    (31) return_statement -> . RETURN expression SEMICOLON
    (32) expression_statement -> . expression SEMICOLON
    (33) print_statement -> . PRINTLN LPAREN STRING RPAREN SEMICOLON
    (68) compound_statement -> . LBRACE statement_list RBRACE
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . BOOLEAN
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    RBRACE          shift and go to state 84
    ID              shift and go to state 15
    IF              shift and go to state 18
    WHILE           shift and go to state 19
    FOR             shift and go to state 20
    RETURN          shift and go to state 21
    PRINTLN         shift and go to state 22
    LBRACE          shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    CHAR            shift and go to state 28
    BOOLEAN         shift and go to state 29
    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    statement                      shift and go to state 43
    var_declaration                shift and go to state 4
    assignment                     shift and go to state 5
    function_declaration           shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    for_statement                  shift and go to state 9
    return_statement               shift and go to state 10
    expression_statement           shift and go to state 11
    print_statement                shift and go to state 12
    compound_statement             shift and go to state 13
    type_specifier                 shift and go to state 14
    expression                     shift and go to state 16
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 56

    (35) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    logical_and_expression         shift and go to state 85
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 57

    (37) logical_and_expression -> logical_and_expression AND . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    equality_expression            shift and go to state 86
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 58

    (39) equality_expression -> equality_expression EQ . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    relational_expression          shift and go to state 87
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 59

    (40) equality_expression -> equality_expression NE . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    relational_expression          shift and go to state 88
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 60

    (42) relational_expression -> relational_expression LT . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    additive_expression            shift and go to state 89
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 61

    (43) relational_expression -> relational_expression GT . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    additive_expression            shift and go to state 90
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 62

    (44) relational_expression -> relational_expression LE . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    additive_expression            shift and go to state 91
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 63

    (45) relational_expression -> relational_expression GE . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    additive_expression            shift and go to state 92
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 64

    (47) additive_expression -> additive_expression PLUS . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    multiplicative_expression      shift and go to state 93
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 65

    (48) additive_expression -> additive_expression MINUS . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    multiplicative_expression      shift and go to state 94
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 66

    (50) multiplicative_expression -> multiplicative_expression TIMES . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    unary_expression               shift and go to state 95
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 67

    (51) multiplicative_expression -> multiplicative_expression DIV . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    unary_expression               shift and go to state 96
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 68

    (52) multiplicative_expression -> multiplicative_expression MOD . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    unary_expression               shift and go to state 97
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 69

    (54) unary_expression -> MINUS unary_expression .

    TIMES           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    DIV             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    PLUS            reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    LT              reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    GT              reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    LE              reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    GE              reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    NE              reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    AND             reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    OR              reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    SEMICOLON       reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 54 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 54 (unary_expression -> MINUS unary_expression .)


state 70

    (55) unary_expression -> NOT unary_expression .

    TIMES           reduce using rule 55 (unary_expression -> NOT unary_expression .)
    DIV             reduce using rule 55 (unary_expression -> NOT unary_expression .)
    MOD             reduce using rule 55 (unary_expression -> NOT unary_expression .)
    PLUS            reduce using rule 55 (unary_expression -> NOT unary_expression .)
    MINUS           reduce using rule 55 (unary_expression -> NOT unary_expression .)
    LT              reduce using rule 55 (unary_expression -> NOT unary_expression .)
    GT              reduce using rule 55 (unary_expression -> NOT unary_expression .)
    LE              reduce using rule 55 (unary_expression -> NOT unary_expression .)
    GE              reduce using rule 55 (unary_expression -> NOT unary_expression .)
    EQ              reduce using rule 55 (unary_expression -> NOT unary_expression .)
    NE              reduce using rule 55 (unary_expression -> NOT unary_expression .)
    AND             reduce using rule 55 (unary_expression -> NOT unary_expression .)
    OR              reduce using rule 55 (unary_expression -> NOT unary_expression .)
    SEMICOLON       reduce using rule 55 (unary_expression -> NOT unary_expression .)
    RPAREN          reduce using rule 55 (unary_expression -> NOT unary_expression .)
    COMMA           reduce using rule 55 (unary_expression -> NOT unary_expression .)


state 71

    (14) var_declaration -> type_specifier ID SEMICOLON .

    ID              reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    IF              reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    WHILE           reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    FOR             reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    RETURN          reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    PRINTLN         reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    LBRACE          reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    INT             reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    FLOAT           reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    DOUBLE          reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    CHAR            reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    BOOLEAN         reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    MINUS           reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    NOT             reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    NUM_INT         reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    NUM_DEC         reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    STRING          reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    LPAREN          reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    $end            reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)
    RBRACE          reduce using rule 14 (var_declaration -> type_specifier ID SEMICOLON .)


state 72

    (15) var_declaration -> type_specifier ID EQUALS . expression SEMICOLON
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 98
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 73

    (22) function_declaration -> type_specifier ID LPAREN . parameter_list RPAREN compound_statement
    (23) parameter_list -> . parameter_list COMMA parameter
    (24) parameter_list -> . parameter
    (25) parameter_list -> . empty
    (26) parameter -> . type_specifier ID
    (67) empty -> .
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . BOOLEAN

    RPAREN          reduce using rule 67 (empty -> .)
    COMMA           reduce using rule 67 (empty -> .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    CHAR            shift and go to state 28
    BOOLEAN         shift and go to state 29

    type_specifier                 shift and go to state 99
    parameter_list                 shift and go to state 100
    parameter                      shift and go to state 101
    empty                          shift and go to state 102

state 74

    (21) assignment -> ID EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 103


state 75

    (58) postfix_expression -> ID LPAREN argument_list . RPAREN
    (59) argument_list -> argument_list . COMMA expression

    RPAREN          shift and go to state 104
    COMMA           shift and go to state 105


state 76

    (60) argument_list -> expression .

    RPAREN          reduce using rule 60 (argument_list -> expression .)
    COMMA           reduce using rule 60 (argument_list -> expression .)


state 77

    (61) argument_list -> empty .

    RPAREN          reduce using rule 61 (argument_list -> empty .)
    COMMA           reduce using rule 61 (argument_list -> empty .)


state 78

    (66) primary_expression -> LPAREN expression RPAREN .

    TIMES           reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    DIV             reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 66 (primary_expression -> LPAREN expression RPAREN .)


state 79

    (27) if_statement -> IF LPAREN expression . RPAREN compound_statement
    (28) if_statement -> IF LPAREN expression . RPAREN compound_statement ELSE compound_statement

    RPAREN          shift and go to state 106


state 80

    (29) while_statement -> WHILE LPAREN expression . RPAREN compound_statement

    RPAREN          shift and go to state 107


state 81

    (30) for_statement -> FOR LPAREN expression . SEMICOLON expression SEMICOLON expression RPAREN compound_statement

    SEMICOLON       shift and go to state 108


state 82

    (31) return_statement -> RETURN expression SEMICOLON .

    ID              reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    IF              reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    PRINTLN         reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    LBRACE          reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    INT             reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    CHAR            reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    BOOLEAN         reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    MINUS           reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    NUM_INT         reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    NUM_DEC         reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    $end            reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 31 (return_statement -> RETURN expression SEMICOLON .)


state 83

    (33) print_statement -> PRINTLN LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 109


state 84

    (68) compound_statement -> LBRACE statement_list RBRACE .

    ID              reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    PRINTLN         reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    FLOAT           reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    DOUBLE          reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    CHAR            reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    BOOLEAN         reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    NOT             reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    NUM_INT         reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    NUM_DEC         reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 68 (compound_statement -> LBRACE statement_list RBRACE .)


state 85

    (35) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (37) logical_and_expression -> logical_and_expression . AND equality_expression

    OR              reduce using rule 35 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    SEMICOLON       reduce using rule 35 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    RPAREN          reduce using rule 35 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    COMMA           reduce using rule 35 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 57


state 86

    (37) logical_and_expression -> logical_and_expression AND equality_expression .
    (39) equality_expression -> equality_expression . EQ relational_expression
    (40) equality_expression -> equality_expression . NE relational_expression

    AND             reduce using rule 37 (logical_and_expression -> logical_and_expression AND equality_expression .)
    OR              reduce using rule 37 (logical_and_expression -> logical_and_expression AND equality_expression .)
    SEMICOLON       reduce using rule 37 (logical_and_expression -> logical_and_expression AND equality_expression .)
    RPAREN          reduce using rule 37 (logical_and_expression -> logical_and_expression AND equality_expression .)
    COMMA           reduce using rule 37 (logical_and_expression -> logical_and_expression AND equality_expression .)
    EQ              shift and go to state 58
    NE              shift and go to state 59


state 87

    (39) equality_expression -> equality_expression EQ relational_expression .
    (42) relational_expression -> relational_expression . LT additive_expression
    (43) relational_expression -> relational_expression . GT additive_expression
    (44) relational_expression -> relational_expression . LE additive_expression
    (45) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    NE              reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    SEMICOLON       reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 39 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 60
    GT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63


state 88

    (40) equality_expression -> equality_expression NE relational_expression .
    (42) relational_expression -> relational_expression . LT additive_expression
    (43) relational_expression -> relational_expression . GT additive_expression
    (44) relational_expression -> relational_expression . LE additive_expression
    (45) relational_expression -> relational_expression . GE additive_expression

    EQ              reduce using rule 40 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 40 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 40 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 40 (equality_expression -> equality_expression NE relational_expression .)
    SEMICOLON       reduce using rule 40 (equality_expression -> equality_expression NE relational_expression .)
    RPAREN          reduce using rule 40 (equality_expression -> equality_expression NE relational_expression .)
    COMMA           reduce using rule 40 (equality_expression -> equality_expression NE relational_expression .)
    LT              shift and go to state 60
    GT              shift and go to state 61
    LE              shift and go to state 62
    GE              shift and go to state 63


state 89

    (42) relational_expression -> relational_expression LT additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    GT              reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    LE              reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    GE              reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    EQ              reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    NE              reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    AND             reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    OR              reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    SEMICOLON       reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    RPAREN          reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    COMMA           reduce using rule 42 (relational_expression -> relational_expression LT additive_expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65


state 90

    (43) relational_expression -> relational_expression GT additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    GT              reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    LE              reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    GE              reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    EQ              reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    NE              reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    AND             reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    OR              reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    SEMICOLON       reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    RPAREN          reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    COMMA           reduce using rule 43 (relational_expression -> relational_expression GT additive_expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65


state 91

    (44) relational_expression -> relational_expression LE additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    GT              reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    LE              reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    GE              reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    EQ              reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    NE              reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    AND             reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    OR              reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    SEMICOLON       reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    RPAREN          reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    COMMA           reduce using rule 44 (relational_expression -> relational_expression LE additive_expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65


state 92

    (45) relational_expression -> relational_expression GE additive_expression .
    (47) additive_expression -> additive_expression . PLUS multiplicative_expression
    (48) additive_expression -> additive_expression . MINUS multiplicative_expression

    LT              reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    GT              reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    LE              reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    GE              reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    EQ              reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    NE              reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    AND             reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    OR              reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    SEMICOLON       reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    RPAREN          reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    COMMA           reduce using rule 45 (relational_expression -> relational_expression GE additive_expression .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65


state 93

    (47) additive_expression -> additive_expression PLUS multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (51) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (52) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LE              reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GE              reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NE              reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AND             reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 47 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68


state 94

    (48) additive_expression -> additive_expression MINUS multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . TIMES unary_expression
    (51) multiplicative_expression -> multiplicative_expression . DIV unary_expression
    (52) multiplicative_expression -> multiplicative_expression . MOD unary_expression

    PLUS            reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LE              reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GE              reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NE              reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AND             reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 48 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 66
    DIV             shift and go to state 67
    MOD             shift and go to state 68


state 95

    (50) multiplicative_expression -> multiplicative_expression TIMES unary_expression .

    TIMES           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    DIV             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MOD             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    PLUS            reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    MINUS           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LT              reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GT              reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    LE              reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    GE              reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    EQ              reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    NE              reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    AND             reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    OR              reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    SEMICOLON       reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    RPAREN          reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)
    COMMA           reduce using rule 50 (multiplicative_expression -> multiplicative_expression TIMES unary_expression .)


state 96

    (51) multiplicative_expression -> multiplicative_expression DIV unary_expression .

    TIMES           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    DIV             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MOD             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    PLUS            reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    MINUS           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LT              reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GT              reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    LE              reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    GE              reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    EQ              reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    NE              reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    AND             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    OR              reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    SEMICOLON       reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    RPAREN          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)
    COMMA           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIV unary_expression .)


state 97

    (52) multiplicative_expression -> multiplicative_expression MOD unary_expression .

    TIMES           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    DIV             reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MOD             reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    PLUS            reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    MINUS           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LT              reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GT              reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    LE              reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    GE              reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    EQ              reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    NE              reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    AND             reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    OR              reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    SEMICOLON       reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    RPAREN          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MOD unary_expression .)


state 98

    (15) var_declaration -> type_specifier ID EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 110


state 99

    (26) parameter -> type_specifier . ID

    ID              shift and go to state 111


state 100

    (22) function_declaration -> type_specifier ID LPAREN parameter_list . RPAREN compound_statement
    (23) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 112
    COMMA           shift and go to state 113


state 101

    (24) parameter_list -> parameter .

    RPAREN          reduce using rule 24 (parameter_list -> parameter .)
    COMMA           reduce using rule 24 (parameter_list -> parameter .)


state 102

    (25) parameter_list -> empty .

    RPAREN          reduce using rule 25 (parameter_list -> empty .)
    COMMA           reduce using rule 25 (parameter_list -> empty .)


state 103

    (21) assignment -> ID EQUALS expression SEMICOLON .

    ID              reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    FOR             reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    PRINTLN         reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    LBRACE          reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    INT             reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    DOUBLE          reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    CHAR            reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    BOOLEAN         reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    MINUS           reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    NOT             reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    NUM_INT         reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    NUM_DEC         reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    STRING          reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    LPAREN          reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    $end            reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 21 (assignment -> ID EQUALS expression SEMICOLON .)


state 104

    (58) postfix_expression -> ID LPAREN argument_list RPAREN .

    TIMES           reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    DIV             reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    MOD             reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    PLUS            reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    LT              reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    GT              reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    LE              reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    GE              reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    EQ              reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    NE              reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    AND             reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    OR              reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    SEMICOLON       reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    RPAREN          reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)
    COMMA           reduce using rule 58 (postfix_expression -> ID LPAREN argument_list RPAREN .)


state 105

    (59) argument_list -> argument_list COMMA . expression
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 114
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 106

    (27) if_statement -> IF LPAREN expression RPAREN . compound_statement
    (28) if_statement -> IF LPAREN expression RPAREN . compound_statement ELSE compound_statement
    (68) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    compound_statement             shift and go to state 115

state 107

    (29) while_statement -> WHILE LPAREN expression RPAREN . compound_statement
    (68) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    compound_statement             shift and go to state 116

state 108

    (30) for_statement -> FOR LPAREN expression SEMICOLON . expression SEMICOLON expression RPAREN compound_statement
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 117
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 109

    (33) print_statement -> PRINTLN LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 118


state 110

    (15) var_declaration -> type_specifier ID EQUALS expression SEMICOLON .

    ID              reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    FOR             reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    RETURN          reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    PRINTLN         reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    LBRACE          reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    INT             reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    DOUBLE          reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    CHAR            reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    BOOLEAN         reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    MINUS           reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    NOT             reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    NUM_INT         reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    NUM_DEC         reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    STRING          reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    LPAREN          reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    $end            reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 15 (var_declaration -> type_specifier ID EQUALS expression SEMICOLON .)


state 111

    (26) parameter -> type_specifier ID .

    RPAREN          reduce using rule 26 (parameter -> type_specifier ID .)
    COMMA           reduce using rule 26 (parameter -> type_specifier ID .)


state 112

    (22) function_declaration -> type_specifier ID LPAREN parameter_list RPAREN . compound_statement
    (68) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    compound_statement             shift and go to state 119

state 113

    (23) parameter_list -> parameter_list COMMA . parameter
    (26) parameter -> . type_specifier ID
    (16) type_specifier -> . INT
    (17) type_specifier -> . FLOAT
    (18) type_specifier -> . DOUBLE
    (19) type_specifier -> . CHAR
    (20) type_specifier -> . BOOLEAN

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    DOUBLE          shift and go to state 27
    CHAR            shift and go to state 28
    BOOLEAN         shift and go to state 29

    parameter                      shift and go to state 120
    type_specifier                 shift and go to state 99

state 114

    (59) argument_list -> argument_list COMMA expression .

    RPAREN          reduce using rule 59 (argument_list -> argument_list COMMA expression .)
    COMMA           reduce using rule 59 (argument_list -> argument_list COMMA expression .)


state 115

    (27) if_statement -> IF LPAREN expression RPAREN compound_statement .
    (28) if_statement -> IF LPAREN expression RPAREN compound_statement . ELSE compound_statement

    ID              reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    IF              reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    WHILE           reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    FOR             reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    RETURN          reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    PRINTLN         reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    LBRACE          reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    INT             reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    FLOAT           reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    DOUBLE          reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    CHAR            reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    BOOLEAN         reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    MINUS           reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    NOT             reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    NUM_INT         reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    NUM_DEC         reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    STRING          reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    LPAREN          reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    $end            reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    RBRACE          reduce using rule 27 (if_statement -> IF LPAREN expression RPAREN compound_statement .)
    ELSE            shift and go to state 121


state 116

    (29) while_statement -> WHILE LPAREN expression RPAREN compound_statement .

    ID              reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    IF              reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    WHILE           reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    FOR             reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    RETURN          reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    PRINTLN         reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    LBRACE          reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    INT             reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    FLOAT           reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    DOUBLE          reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    CHAR            reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    BOOLEAN         reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    MINUS           reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    NOT             reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    NUM_INT         reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    NUM_DEC         reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    STRING          reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    LPAREN          reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    $end            reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)
    RBRACE          reduce using rule 29 (while_statement -> WHILE LPAREN expression RPAREN compound_statement .)


state 117

    (30) for_statement -> FOR LPAREN expression SEMICOLON expression . SEMICOLON expression RPAREN compound_statement

    SEMICOLON       shift and go to state 122


state 118

    (33) print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .

    ID              reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    RETURN          reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    PRINTLN         reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    LBRACE          reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    INT             reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    FLOAT           reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    CHAR            reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    MINUS           reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    NOT             reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    NUM_INT         reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    NUM_DEC         reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    STRING          reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    LPAREN          reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    $end            reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)
    RBRACE          reduce using rule 33 (print_statement -> PRINTLN LPAREN STRING RPAREN SEMICOLON .)


state 119

    (22) function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .

    ID              reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    IF              reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    WHILE           reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    FOR             reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    RETURN          reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    PRINTLN         reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    LBRACE          reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    INT             reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    FLOAT           reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    DOUBLE          reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    CHAR            reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    BOOLEAN         reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    MINUS           reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    NOT             reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    NUM_INT         reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    NUM_DEC         reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    STRING          reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    LPAREN          reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    $end            reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)
    RBRACE          reduce using rule 22 (function_declaration -> type_specifier ID LPAREN parameter_list RPAREN compound_statement .)


state 120

    (23) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 23 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 23 (parameter_list -> parameter_list COMMA parameter .)


state 121

    (28) if_statement -> IF LPAREN expression RPAREN compound_statement ELSE . compound_statement
    (68) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    compound_statement             shift and go to state 123

state 122

    (30) for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON . expression RPAREN compound_statement
    (34) expression -> . logical_or_expression
    (35) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (36) logical_or_expression -> . logical_and_expression
    (37) logical_and_expression -> . logical_and_expression AND equality_expression
    (38) logical_and_expression -> . equality_expression
    (39) equality_expression -> . equality_expression EQ relational_expression
    (40) equality_expression -> . equality_expression NE relational_expression
    (41) equality_expression -> . relational_expression
    (42) relational_expression -> . relational_expression LT additive_expression
    (43) relational_expression -> . relational_expression GT additive_expression
    (44) relational_expression -> . relational_expression LE additive_expression
    (45) relational_expression -> . relational_expression GE additive_expression
    (46) relational_expression -> . additive_expression
    (47) additive_expression -> . additive_expression PLUS multiplicative_expression
    (48) additive_expression -> . additive_expression MINUS multiplicative_expression
    (49) additive_expression -> . multiplicative_expression
    (50) multiplicative_expression -> . multiplicative_expression TIMES unary_expression
    (51) multiplicative_expression -> . multiplicative_expression DIV unary_expression
    (52) multiplicative_expression -> . multiplicative_expression MOD unary_expression
    (53) multiplicative_expression -> . unary_expression
    (54) unary_expression -> . MINUS unary_expression
    (55) unary_expression -> . NOT unary_expression
    (56) unary_expression -> . postfix_expression
    (57) postfix_expression -> . primary_expression
    (58) postfix_expression -> . ID LPAREN argument_list RPAREN
    (62) primary_expression -> . ID
    (63) primary_expression -> . NUM_INT
    (64) primary_expression -> . NUM_DEC
    (65) primary_expression -> . STRING
    (66) primary_expression -> . LPAREN expression RPAREN

    MINUS           shift and go to state 36
    NOT             shift and go to state 38
    ID              shift and go to state 49
    NUM_INT         shift and go to state 41
    NUM_DEC         shift and go to state 42
    STRING          shift and go to state 23
    LPAREN          shift and go to state 17

    expression                     shift and go to state 124
    logical_or_expression          shift and go to state 30
    logical_and_expression         shift and go to state 31
    equality_expression            shift and go to state 32
    relational_expression          shift and go to state 33
    additive_expression            shift and go to state 34
    multiplicative_expression      shift and go to state 35
    unary_expression               shift and go to state 37
    postfix_expression             shift and go to state 39
    primary_expression             shift and go to state 40

state 123

    (28) if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .

    ID              reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    IF              reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    WHILE           reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    FOR             reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    RETURN          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    PRINTLN         reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    LBRACE          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    INT             reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    FLOAT           reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    DOUBLE          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    CHAR            reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    BOOLEAN         reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    MINUS           reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    NOT             reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    NUM_INT         reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    NUM_DEC         reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    STRING          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    LPAREN          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    $end            reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)
    RBRACE          reduce using rule 28 (if_statement -> IF LPAREN expression RPAREN compound_statement ELSE compound_statement .)


state 124

    (30) for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression . RPAREN compound_statement

    RPAREN          shift and go to state 125


state 125

    (30) for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN . compound_statement
    (68) compound_statement -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 24

    compound_statement             shift and go to state 126

state 126

    (30) for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .

    ID              reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    IF              reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    WHILE           reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    FOR             reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    RETURN          reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    PRINTLN         reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    LBRACE          reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    INT             reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    FLOAT           reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    DOUBLE          reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    CHAR            reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    BOOLEAN         reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    MINUS           reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    NOT             reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    NUM_INT         reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    NUM_DEC         reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    STRING          reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    LPAREN          reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    $end            reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)
    RBRACE          reduce using rule 30 (for_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement .)

